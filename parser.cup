/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import cup.example.*;
import sintaxeabstract.*;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN;
terminal Integer   	NUMBER;        // our scanner provides numbers as integers
terminal BOOLEAN, COLEQ, COMMA, COLON, ARRAY, FALSE, WHILE, REACT,  UNTIL, ACTOR;
terminal CLASS, MINUSMINUS, LEQ, NEQ , AND, DOT, DIV, NOT, MOD, GEQ, NEW, ALL, DEF, ACT, INT;
terminal SET, VAL, VAR, DOUBLEARROW, EQEQ, NULL, ELSE, TRUE, UNIT;
terminal CASE, UNDERLINE, RANNOT, ATSIGN, DOLLAR, LANNOT, EQEQEQ, IMPORT, OBJECT;
terminal STRING, RSQUAREBRACKET, LSQUAREBRACKET, OR, GT, EQ, LT, EX, IF, DO, RCURLYBRACKET, 
LCURLYBRACKET, EXTENDS, ENSURING;
terminal String ID;
 

/* Non terminals */
/*non terminal            expr_list;
non terminal Integer    expr; */
non terminal program;     // used to store evaluated subexpressions
non terminal Top;
non terminal ScalaProgram;
non terminal Import;
non terminal ImportDeclaration;
non terminal ImportDeclarations;
non terminal Predicates;
non terminal ScalaObject;
non terminal ImportExprs; 
non terminal ImportExpr;
non terminal PathElem;
non terminal PredStats;
non terminal PredStat;
non terminal Expr;
non terminal VarDeclaration;
non terminal Variable;
non terminal Type;
non terminal Declarations;
non terminal Declaration;
non terminal ActorStats;
non terminal ActorStat;
non terminal FunDeclaration;
non terminal ClassDeclaration;
non terminal React;
non terminal ParamClause;
non terminal FunDeclarationWOPost;
non terminal ParamsComma;
non terminal ExprsComma;
non terminal ArgumentExprs;
non terminal BinaryExpression;
non terminal BlockStats;
non terminal Block;
non terminal BlockStat;
non terminal Binding;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;
precedence left OR;
precedence left AND;
precedence left EQ, COLEQ;
precedence left NEQ;
precedence right ELSE;
precedence right DOUBLEARROW;
precedence nonassoc GT, LEQ, LT, GEQ, EQEQ, EQEQEQ, ATSIGN, UNTIL;
precedence left PLUS, MINUS, MINUSMINUS;
precedence left TIMES, DIV, MOD;
precedence left NOT, DOLLAR;
precedence left	DOT;
precedence left LPAREN;


/* The grammar rules */
start with Top;
/*expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
             ;*/
       
Top               ::= ScalaProgram:scp
                   {: RESULT = scp; :}
                   ;
ScalaProgram      ::= Import ScalaObject:so
                   {: RESULT = so; :}
                   |  Predicates:ps Import ScalaObject:so
                   {: RESULT = new makeScalaObject(ps, so); :}
                   ;

ScalaObject       ::= OBJECT ID:id LCURLYBRACKET Declarations:ds RCURLYBRACKET
                   {: IdExp ie = new IdExp(id2); RESULT = new makeScalaObject(ie, ds); :} //ver o que tem para retornar
                   ;
                  
                   
Import            ::= 
                   |  ImportDeclarations
                   ;
                   
ImportDeclaration ::= IMPORT ImportExprs
                   ;
                   
ImportDeclarations::= ImportDeclaration
                   |  ImportDeclarations ImportDeclaration 
                   ;  
                   
Predicates        ::= LANNOT PredStats:ps RANNOT
                   {: RESULT = ps; :}
                   ;
ImportExprs       ::= ImportExpr
                   |  ImportExprs COMMA ImportExpr
                   ;
                   
ImportExpr        ::= PathElem:pe
                   |  ImportExpr DOT PathElem:pe
                   ;
                   
PathElem          ::= ID:id
                   |  UNDERLINE
                   ; //isso aqui quer dizer import java.io._

Type              ::= UNIT:s
                   //{: RESULT = s :}
                   |  ARRAY:a LSQUAREBRACKET Type:t RSQUAREBRACKET
                   //{: RESULT = a :}
                   |  SET:s LSQUAREBRACKET Type:t RSQUAREBRACKET
                   //{: RESULT = s :}                   
                   |  INT:i
                  // {: RESULT = i :}
                   |  STRING:s
                   //{: RESULT = s :}
                   |  BOOLEAN:b
                   //{: RESULT = b :}
                   |  ID:id
                   //{: RESULT = id :}                   
                   ; 
Declarations      ::= Declaration:d
                   //{: RESULT =  :}
                   |  Declarations:ds Declaration:d
                   //{: RESULT =  :}
                   ;

Declaration       ::= VAL Variable:v COLON Type:t EQ ACTOR LCURLYBRACKET ActorStats:es RCURLYBRACKET
                   //{: RESULT =  :}
                   |  FunDeclaration:fd
                   //{: RESULT =  :}
                   |  Predicates:ps
                   //{: RESULT =  :}
                   |  VarDeclaration:vd
                   //{: RESULT =  :}                   
                   |  ClassDeclaration:cd
                   //{: RESULT =  :}
                   ;
ActorStats        ::= ActorStat:a
				   //{: RESULT = list; :}
                   |  ActorStats:as ActorStat:a
                   //{: RESULT = as; :} 
                   ;

ActorStat         ::= Expr:e
				   //{: RESULT =  :}
                   |  Declaration:d
                   //{: RESULT =  :}
                   |  React:r
                   //{: RESULT =  :}
                   ;
                   
VarDeclaration    ::= VAR Variable:v COLON Type:t EQ Expr:e
                   //{: RESULT = }
                   |  VAL Variable:v COLON Type:t EQ Expr:e
                   //{: RESULT = :}
                   ;
                   
ClassDeclaration  ::= CLASS ID:id1 ParamClause:ps EXTENDS ID:id2 LCURLYBRACKET ActorStats:es RCURLYBRACKET
                   //{: RESULT =  :}
                   ;   
                                 
FunDeclaration    ::= FunDeclarationWOPost:f ENSURING LPAREN Variable:rs DOUBLEARROW Expr:pst RPAREN
                   //{: RESULT =  :}
                   |  FunDeclarationWOPost:f
                   //{: RESULT = :}
                   ;                                      

FunDeclarationWOPost::= DEF ID:id ParamClause:ps COLON Type:t EQ Expr:e
                   //{: RESULT = :}
                   |  DEF ID:id ParamClause:ps EQ Expr:e
                   //{: RESULT = :}
                   |  DEF ID:id ParamClause:ps Block:b
                   //{: RESULT = :}
                   |  DEF ACT:a ParamClause:ps LCURLYBRACKET ActorStats:es RCURLYBRACKET
                   //{: RESULT =:}
                   ;                                                  
                   
Variable          ::= ID:id
                   //{: RESULT = id; :}
                   |  DOLLAR ID:id
                   //{: RESULT = id; :}
                   ;      
                   
ParamClause       ::= LPAREN ParamsComma:ps RPAREN
                   //{: RESULT = ps; :}
                   |
                   //{: RESULT =  :}
                   |  LPAREN RPAREN
                   //{:  RESULT =  :}                   
                   ;                   
                   
PredStats         ::= PredStat:p
				   //{: RESULT =  (new list<PredStat>()) a.add(p): a}
                   |  PredStats:ps PredStat:p
                   //{: RESULT =  ps.add(p); ps:}
                   ;

PredStat          ::= Expr:e
				   //{: RESULT = :}
                   |  VarDeclaration:vd
                   //{: RESULT =  :}
                   |  Expr:e ATSIGN LCURLYBRACKET PredStats:ps RCURLYBRACKET
				   //{: RESULT = :}                   
                   ;                   
ExprsComma        ::= Expr:e
				   //{:  RESULT =  :}
                   |  ExprsComma:es COMMA Expr:e
                   //{: RESULT =  :}
                   ;    
                   
Expr              ::= ALL:q ID:bv COLON Type:t DOT Expr:e
                   //{: RESULT =  :} 
                   |  EX:q ID:bv COLON Type:t DOT Expr:e
                   //{: RESULT =  :} 
                   |  LPAREN Expr:e RPAREN
                   //{: RESULT = :}
                   |  IF LPAREN Expr:e1 RPAREN Expr:e2 ELSE Expr:e3
                   //{: RESULT =  :}
                   |  WHILE LPAREN Expr:e1 RPAREN Expr:e2
                   //{: RESULT =  :}                   
                   |  MINUS Expr:e
                   //{: RESULT  :}
                   |  NOT Expr:e
                   //{: RESULT =  :}
                   |  ID:id ArgumentExprs:as
                   //{: RESULT =  :}
                   |  DOLLAR ID:id ArgumentExprs:as
                   //{: RESULT =  :}                   
                   |  ID:id ArgumentExprs:e1 ArgumentExprs:e2
                   //{: RESULT =  :}
                   |  DOLLAR ID:id ArgumentExprs:e1 ArgumentExprs:e2
                   //{: RESULT =  :}                   
                   |  ARRAY ArgumentExprs:as
                   //{: RESULT =  :}
                   |  SET ArgumentExprs:as
                   //{: RESULT =  :}                   
                   |  NEW ARRAY LSQUAREBRACKET Type:t RSQUAREBRACKET LPAREN Expr:e RPAREN
                   //{: RESULT =  :}
                   |  BinaryExpression:b
                   //{: RESULT =  :}
                   |  Variable:v
                   //{: RESULT =  :}
                   |  NEW ID:id ArgumentExprs:as
                   //{: RESULT =  :}
                   |  NEW ID:id
                   //{: RESULT =  :} 
                   |  Block:b
                   //{: RESULT =  :}
                   |  NUMBER:n
                   //{: RESULT =  :}
                   |  NULL:n
                   //{: RESULT = ; :}
                   |  TRUE:t
                   //{: RESULT =  :}
                   |  FALSE:f
                   //{: RESULT =  :}                   
                   ;                   
ArgumentExprs     ::= LPAREN RPAREN
                   //{: RESULT =  :}
                   |  LPAREN ExprsComma:es RPAREN
                   //{: RESULT = es; :}
                   ;   
                   
BinaryExpression  ::= IF LPAREN Expr:e1 RPAREN Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 OR:p Expr:e2
                   //{: RESULT = :}                    
                   |  Expr:e1 AND:p Expr:e2
                   //{: RESULT = :}                   
                   |  Expr:e1 EQEQ:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 EQ:p Expr:e2
                   //{: RESULT = :}                  
                   |  Expr:e1 NEQ:p Expr:e2
                   //{: RESULT =  :}
                   |  Expr:e1 EQEQEQ:p Expr:e2
                   //{: RESULT = :}                   
                   |  Expr:e1 LT:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 LEQ:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 GT:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 GEQ:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 PLUS:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 MINUS:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 MINUSMINUS:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 TIMES:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 DIV:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 MOD:p Expr:e2
                   //{: RESULT = :}
                   |  Expr:e1 DOT:p Expr:e2
                   //{: RESULT = :}                  
				   |  Expr:e1 UNTIL:p Expr:e2
                   //{: RESULT = :}
                   |  Binding:e1 DOUBLEARROW Expr:e2
                   //{: RESULT = :}                   
                   |  Expr:e1 NOT:p Expr:e2
                   //{: RESULT =  :}
                   ;
                   
Block             ::= LCURLYBRACKET BlockStats:es RCURLYBRACKET
                   //{: RESULT = :}
                   |  LCURLYBRACKET RCURLYBRACKET
                   //{: RESULT = :}
                   ;
                   
BlockStats        ::= BlockStat:b
				   //{: RESULT =  :}
                   |  BlockStats:bs BlockStat:b
                   //{: RESULT =  :} 
                   ;

BlockStat         ::= Expr:e
				   {: RESULT = e; :}
                   |  Declaration:d
                   {: RESULT = d; :}
                   ;
                   
Binding           ::= Variable:v
                   {: RESULT = v; :}
                   ;           
                 