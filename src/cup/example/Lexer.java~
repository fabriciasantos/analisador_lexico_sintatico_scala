/* The following code was generated by JFlex 1.3.5 on 15/02/19 20:22 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 15/02/19 20:22 from the specification file
 * <tt>file:/E:/analisador_lexico_sintatico_scala/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\23\2\0"+
    "\1\26\1\25\1\21\1\11\1\17\1\20\1\13\1\4\1\34\1\5"+
    "\1\33\1\12\1\6\11\7\1\14\1\15\1\30\1\31\1\32\1\0"+
    "\1\27\1\10\1\57\6\10\1\56\11\10\1\60\7\10\1\37\1\0"+
    "\1\40\1\0\1\24\1\0\1\55\1\66\1\63\1\50\1\43\1\42"+
    "\1\61\1\47\1\41\1\67\1\10\1\44\1\64\1\16\1\51\1\65"+
    "\1\10\1\53\1\45\1\52\1\54\1\62\1\46\1\70\1\71\1\10"+
    "\1\35\1\22\1\36\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    58,   116,   174,   116,   116,   232,   116,   290,   348, 
      406,   464,   522,   116,   580,   116,   116,   638,   696,   754, 
      116,   116,   116,   116,   812,   870,   928,   116,   116,   116, 
      116,   116,   116,   986,  1044,  1102,  1160,  1218,  1276,  1334, 
     1392,  1450,  1508,  1566,  1624,  1682,  1740,  1798,   116,  1856, 
     1914,   116,   116,  1972,  2030,   116,   116,   116,   116,  2088, 
      116,   116,   348,  2146,  2204,  2262,  2320,  2378,  2436,  2494, 
      348,  2552,  2610,  2668,  2726,  2784,  2842,  2900,  2958,  3016, 
     3074,  3132,  3190,   116,   348,  3248,   116,  3306,  3364,  3422, 
     3480,  3538,  3596,   348,  3654,  3712,  3770,  3828,   348,  3886, 
     3944,   348,   348,  4002,  4060,  4118,   348,  4176,  4234,   348, 
     4292,   348,  4350,  4408,   348,  4466,  4524,  4582,  4640,  4698, 
      348,  4756,   348,  4814,   348,  4872,   348,   348,  4930,  4988, 
      348,   348,  5046,   348,  5104,   348,   348,   348
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\12\1\46\1\12\1\47"+
    "\1\50\1\51\1\12\1\52\1\53\1\54\1\55\1\56"+
    "\1\12\1\57\1\60\6\12\72\3\74\0\1\5\74\0"+
    "\1\61\72\0\2\11\70\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\31\12\12\0\1\62\1\63\70\0\1\64"+
    "\110\0\1\65\46\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\2\12\1\66\10\12\1\67\15\12\21\0\1\70"+
    "\72\0\1\71\100\0\1\72\71\0\1\73\71\0\1\74"+
    "\1\75\70\0\1\76\46\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\1\12\1\77\21\12\1\100\5\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\14\12\1\101"+
    "\14\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\3\12\1\102\23\12\1\103\1\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\10\12\1\104\20\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\6\12\1\105"+
    "\22\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\2\12\1\106\5\12\1\107\20\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\25\12\1\110\3\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\12\12\1\111"+
    "\16\12\6\0\4\12\4\0\1\112\5\0\1\12\14\0"+
    "\31\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\12\12\1\113\16\12\6\0\4\12\4\0\1\114\5\0"+
    "\1\12\14\0\31\12\6\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\10\12\1\115\20\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\11\12\1\116\17\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\14\12\1\117"+
    "\14\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\3\12\1\120\10\12\1\121\14\12\1\62\1\4\1\5"+
    "\67\62\13\122\1\123\1\124\55\122\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\5\12\1\125\23\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\3\12\1\126"+
    "\25\12\31\0\1\127\46\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\24\12\1\130\4\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\3\12\1\131\25\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\4\12\1\132"+
    "\24\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\11\12\1\133\17\12\6\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\10\12\1\134\20\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\1\135\30\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\1\12\1\136\27\12"+
    "\6\0\4\12\4\0\1\12\5\0\1\12\14\0\26\12"+
    "\1\137\2\12\6\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\13\12\1\140\15\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\11\12\1\141\17\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\12\12\1\142\16\12"+
    "\6\0\4\12\4\0\1\12\5\0\1\12\14\0\11\12"+
    "\1\143\17\12\6\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\10\12\1\144\20\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\12\12\1\145\16\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\3\12\1\146\6\12"+
    "\1\147\16\12\6\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\14\12\1\150\14\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\4\12\1\151\24\12\13\122\1\152"+
    "\56\122\12\0\1\5\1\123\64\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\3\12\1\153\25\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\10\12\1\154\20\12"+
    "\6\0\4\12\4\0\1\12\5\0\1\12\14\0\4\12"+
    "\1\155\24\12\6\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\2\12\1\156\26\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\2\12\1\157\26\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\24\12\1\160\4\12"+
    "\6\0\4\12\4\0\1\12\5\0\1\12\14\0\3\12"+
    "\1\161\25\12\6\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\2\12\1\162\26\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\2\12\1\163\26\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\1\164\30\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\14\12\1\165"+
    "\14\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\3\12\1\166\25\12\6\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\1\167\30\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\4\12\1\170\24\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\2\12\1\171\26\12"+
    "\12\122\1\5\1\152\56\122\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\12\12\1\172\16\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\2\12\1\173\26\12"+
    "\6\0\4\12\4\0\1\174\5\0\1\12\14\0\31\12"+
    "\6\0\4\12\4\0\1\12\5\0\1\12\14\0\2\12"+
    "\1\175\26\12\6\0\4\12\4\0\1\12\5\0\1\12"+
    "\14\0\22\12\1\176\6\12\6\0\4\12\4\0\1\12"+
    "\5\0\1\12\14\0\3\12\1\177\25\12\6\0\4\12"+
    "\4\0\1\12\5\0\1\12\14\0\30\12\1\200\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\2\12\1\201"+
    "\26\12\6\0\4\12\4\0\1\202\5\0\1\12\14\0"+
    "\31\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\4\12\1\203\24\12\6\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\11\12\1\204\17\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\7\12\1\205\21\12\6\0"+
    "\4\12\4\0\1\12\5\0\1\12\14\0\11\12\1\206"+
    "\17\12\6\0\4\12\4\0\1\12\5\0\1\12\14\0"+
    "\14\12\1\207\14\12\6\0\4\12\4\0\1\12\5\0"+
    "\1\12\14\0\20\12\1\210\10\12\6\0\4\12\4\0"+
    "\1\12\5\0\1\12\14\0\4\12\1\211\24\12\6\0"+
    "\4\12\4\0\1\212\5\0\1\12\14\0\31\12";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  9, 
     9,  1,  1,  1,  9,  9,  9,  9,  1,  1,  1,  9,  9,  9,  9,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  0,  0,  9,  9,  1,  1,  9,  9,  9,  9,  1,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[5162];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 70: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 139: break;
        case 62: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 140: break;
        case 24: 
          {  return symbolFactory.newSymbol("LT", LT);  }
        case 141: break;
        case 25: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 142: break;
        case 26: 
          {  return symbolFactory.newSymbol("GT", GT);  }
        case 143: break;
        case 7: 
        case 8: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 144: break;
        case 9: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 53: 
        case 54: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 85: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 99: 
        case 100: 
        case 103: 
        case 104: 
        case 107: 
        case 108: 
        case 110: 
        case 112: 
        case 113: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 121: 
        case 123: 
        case 125: 
        case 128: 
        case 129: 
        case 132: 
        case 134: 
          {  return symbolFactory.newSymbol("ID", ID, new String(yytext()));  }
        case 145: break;
        case 29: 
          {  return symbolFactory.newSymbol("LCURLYBRACKET", LCURLYBRACKET);  }
        case 146: break;
        case 30: 
          {  return symbolFactory.newSymbol("RCURLYBRACKET", RCURLYBRACKET);  }
        case 147: break;
        case 3: 
        case 4: 
          {                                }
        case 148: break;
        case 137: 
          {  return symbolFactory.newSymbol("BOOLEAN", BOOLEAN);  }
        case 149: break;
        case 136: 
          {  return symbolFactory.newSymbol("EXTENDS", EXTENDS);  }
        case 150: break;
        case 130: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 151: break;
        case 127: 
          {  return symbolFactory.newSymbol("ARRAY", ARRAY);  }
        case 152: break;
        case 126: 
          {  return symbolFactory.newSymbol("UNTIL", UNTIL);  }
        case 153: break;
        case 124: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 154: break;
        case 122: 
          {  return symbolFactory.newSymbol("FALSE", FALSE);  }
        case 155: break;
        case 12: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 156: break;
        case 6: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 157: break;
        case 11: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 158: break;
        case 28: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 159: break;
        case 52: 
          {  return symbolFactory.newSymbol("COLEQ", COLEQ);  }
        case 160: break;
        case 2: 
        case 17: 
        case 18: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 161: break;
        case 48: 
          {  return symbolFactory.newSymbol("MINUSMINUS", MINUSMINUS);  }
        case 162: break;
        case 102: 
          {  return symbolFactory.newSymbol("VAR", VAR);  }
        case 163: break;
        case 101: 
          {  return symbolFactory.newSymbol("VAL", VAL);  }
        case 164: break;
        case 98: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 165: break;
        case 93: 
          {  return symbolFactory.newSymbol("DEF", DEF);  }
        case 166: break;
        case 84: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 167: break;
        case 61: 
          {  return symbolFactory.newSymbol("GEQ", GEQ);  }
        case 168: break;
        case 21: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 169: break;
        case 19: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 170: break;
        case 10: 
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 171: break;
        case 27: 
          {  return symbolFactory.newSymbol("DOT", DOT);  }
        case 172: break;
        case 55: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 173: break;
        case 56: 
          {  return symbolFactory.newSymbol("OR", AND);  }
        case 174: break;
        case 57: 
          {  return symbolFactory.newSymbol("NEQ", NEQ);  }
        case 175: break;
        case 58: 
          {  return symbolFactory.newSymbol("LEQ", LEQ);  }
        case 176: break;
        case 60: 
          {  return symbolFactory.newSymbol("DOUBLEARROW", DOUBLEARROW);  }
        case 177: break;
        case 120: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 178: break;
        case 114: 
          {  return symbolFactory.newSymbol("TRUE", TRUE);  }
        case 179: break;
        case 111: 
          {  return symbolFactory.newSymbol("LOOP", LOOP);  }
        case 180: break;
        case 109: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 181: break;
        case 106: 
          {  return symbolFactory.newSymbol("NULL", NULL);  }
        case 182: break;
        case 13: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 183: break;
        case 5: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 184: break;
        case 59: 
          {  return symbolFactory.newSymbol("EQEQ", EQEQ);  }
        case 185: break;
        case 20: 
          {  return symbolFactory.newSymbol("UNDERLINE", UNDERLINE);  }
        case 186: break;
        case 135: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 187: break;
        case 133: 
          {  return symbolFactory.newSymbol("OBJECT", OBJECT);  }
        case 188: break;
        case 131: 
          {  return symbolFactory.newSymbol("IMPORT", IMPORT);  }
        case 189: break;
        case 86: 
          {  return symbolFactory.newSymbol("EQEQEQ", EQEQEQ);  }
        case 190: break;
        case 83: 
          {  return symbolFactory.newSymbol("LANNOT", LANNOT);  }
        case 191: break;
        case 22: 
          {  return symbolFactory.newSymbol("DOLLAR", DOLLAR);  }
        case 192: break;
        case 16: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 193: break;
        case 15: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 194: break;
        case 14: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS);  }
        case 195: break;
        case 23: 
          {  return symbolFactory.newSymbol("ATSIGN", ATSIGN);  }
        case 196: break;
        case 51: 
          {  return symbolFactory.newSymbol("RANNOT", RANNOT);  }
        case 197: break;
        case 32: 
          {  return symbolFactory.newSymbol("RSQUAREBRACKET", RSQUAREBRACKET);  }
        case 198: break;
        case 31: 
          {  return symbolFactory.newSymbol("LSQUAREBRACKET", LSQUAREBRACKET);  }
        case 199: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
